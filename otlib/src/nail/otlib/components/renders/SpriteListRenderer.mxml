<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true"
				height="41"
				creationComplete="creationCompleteHandler(event)"
				dataChange="dataChangeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import nail.otlib.components.controls.SpriteList;
			import nail.otlib.core.otlib_internal;
			import nail.otlib.events.SpriteListEvent;
			import nail.otlib.utils.SpriteData;
			
			use namespace otlib_internal;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function creationCompleteHandler(event:FlexEvent) : void
			{
				var cm : ContextMenu;
				cm = createContextMenu();
				cm.addEventListener(Event.SELECT, contextMenuSelectHandler);
				cm.addEventListener(Event.DISPLAYING, contextMenuDisplayingHandler);
				this.contextMenu = cm;	
			}
			
			protected function contextMenuDisplayingHandler(event:Event) : void
			{
				SpriteList(owner).setSelectedIndex(this.itemIndex, true);
			}
			
			protected function contextMenuSelectHandler(event:Event) : void
			{
				var type : String = NativeMenuItem(event.target).data as String;
				SpriteList(owner).onContextMenuSelect(this.itemIndex, type);
			}
			
			protected function dataChangeHandler(event:FlexEvent) : void
			{
				var sprite : SpriteData;
				var bitmap : BitmapData;
				
				sprite = data as SpriteData;
				if (sprite != null)
				{
					imageDisplay.source = sprite.getBitmap();
					labelDisplay.text = sprite.id.toString();
				}
			}
			
			//--------------------------------------------------------------------------
			//
			// STATIC
			//
			//--------------------------------------------------------------------------
			
			static private function createContextMenu() : ContextMenu
			{
				var menu : ContextMenu;
				var replaceMenu : ContextMenuItem;
				var exportMenu : ContextMenuItem;
				var removeMenu : ContextMenuItem;
				
				replaceMenu = new ContextMenuItem("Replace");
				replaceMenu.data = SpriteListEvent.REPLACE;
				exportMenu = new ContextMenuItem("Export");
				exportMenu.data = SpriteListEvent.EXPORT;
				removeMenu = new ContextMenuItem("Remove");
				removeMenu.data = SpriteListEvent.REMOVE;
				menu = new ContextMenu();
				menu.customItems = [replaceMenu, exportMenu, removeMenu];
				
				return menu;
			}
			
		]]>
	</fx:Script>
	
	<!-- border -->
	<s:Rect left="0" right="0" top="0" bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="0x272727" weight="0.1"/>
		</s:stroke>
	</s:Rect>
	
	<!-- image and label -->
	<s:HGroup width="100%"
			  height="100%"
			  paddingLeft="3"
			  paddingRight="3"
			  verticalAlign="middle">
		
		<s:Group width="36"
				 height="36">
			
			<s:Rect left="0" right="0" top="0" bottom="0">
				<s:fill>
					<s:SolidColor color="0x636363"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="0x272727"/>
				</s:stroke>
			</s:Rect>
			
			<s:Image id="imageDisplay"
					 horizontalCenter="0"
					 verticalCenter="0"/>
			
		</s:Group>
		
		<s:Label id="labelDisplay"/>
		
	</s:HGroup>
</s:ItemRenderer>
