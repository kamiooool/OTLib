<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="64"
		 height="64"
		 creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import nail.otlib.things.ThingCategory;
			import nail.otlib.things.ThingType;
			import nail.otlib.utils.SpriteData;
			import nail.otlib.utils.ThingData;
			
			//--------------------------------------------------------------------------
			//
			// PROPERTIES
			//
			//--------------------------------------------------------------------------
			
			private var _thingData : ThingData;
			private var _rect : Rectangle = new Rectangle(0, 0, 32, 32);
			private var _fillRect : Rectangle = new Rectangle();
			private var _point : Point = new Point();
			private var _timer : Timer;
			private var _frame : uint;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Private
			//--------------------------------------
			
			private function draw() : void
			{
				var size : uint;
				var width : int;
				var height : int;
				var layers : int;
				var l : int;
				var w : int;
				var h : int;
				var x : int;
				var px : int;
				var py : int;
				var bitmap : BitmapData;
				var index : int;
				
				bitmap = image.source as BitmapData;
				
				if (_thingData != null && bitmap != null)
				{
					width = this.thingData.thing.width;
					height = this.thingData.thing.height;
					layers = this.thingData.thing.layers;
					size = 32;
					
					if (_thingData.category == ThingCategory.OUTFIT)
					{
						layers = 1;
						x = this.thingData.thing.frames > 1 ? 2 : 0;
					}
					
					bitmap.fillRect(_fillRect, 0xFF636363);
					
					for (l = 0; l < layers; l++)
					{
						for (w = 0; w < width; w++)
						{
							for (h = 0; h < height; h++)
							{
								index = getSpriteIndex(_thingData.thing, w, h, l, x, 0, 0, _frame);
								px = ((width - w - 1) * size);
								py = ((height - h - 1) * size);
								copyPixels(index, bitmap, px, py);
							}
						}
					}	
				}
			}
			
			private function createBitmap() : void
			{
				var bitmap : BitmapData;
				
				if (image.source != null)
				{
					image.source.dispose();
					image.source = null;
				}
				
				if (this.thingData != null)
				{ 	
					bitmap = new BitmapData(this.thingData.thing.width * 32, this.thingData.thing.height * 32, true, 0xFF636363);
					image.source = bitmap;
					_fillRect.setTo(0, 0, bitmap.width, bitmap.height);
				}
				
				draw();
			}
			
			private function getSpriteIndex(thing:ThingType, w:int, h:int, l:int, x:int, y:int, z:int, f:int) : uint
			{
				return ((((((f % thing.frames)
					* thing.patternZ + z)
					* thing.patternY + y)
					* thing.patternX + x)
					* thing.layers + l)
					* thing.height + h)
					* thing.width + w;
			}
			
			private function copyPixels(index:uint, bitmap:BitmapData, x:uint, y:uint) : void
			{
				var spriteData : SpriteData;
				var bmp : BitmapData;
				
				if (index < this.thingData.length)
				{
					spriteData = this.thingData.sprites[index];
					if (spriteData != null && spriteData.pixels != null)
					{
						_point.x = x;
						_point.y = y;
						
						bmp = spriteData.getBitmap();
						if (bmp != null)
						{
							spriteData.pixels.position = 0;
							bitmap.copyPixels(bmp, _rect, _point, null, null, true);
						}
					}
				}
			}

			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				_timer = new Timer(500);
				_timer.addEventListener(TimerEvent.TIMER, timerEventHandler);
			}
			
			protected function timerEventHandler(event:TimerEvent) : void
			{
				var min : uint = _thingData.category == ThingCategory.OUTFIT ? 1 : 0;
				_frame = Math.max(min, (_frame + 1) % _thingData.thing.frames);
				draw();
			}
			
			//--------------------------------------
			// Getters / Setters 
			//--------------------------------------
			
			public function get thingData() : ThingData
			{
				return _thingData;
			}

			public function set thingData(value:ThingData) : void
			{
				if (_thingData != value)
				{
					_thingData = value;
					_frame = 1;
					_timer.stop();
					createBitmap();
					
					if (_thingData != null && _thingData.thing.frames > 1)
					{
						_timer.delay = _thingData.category == ThingCategory.ITEM ? 400 : 200;
						_timer.start();
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Image id="image"
			 horizontalCenter="0"
			 verticalCenter="0"/>
	
</s:Group>
