<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:nail="library://ns.nail.com/naillib"
		  title="Export"
		  showStatusBar="false"
		  backgroundColor="0x494949"
		  width="400"
		  height="210"
		  resizable="false"
		  maximizable="false"
		  minimizable="false"
		  fontSize="11"
		  closing="windowClosingHandler(event)">
	
	<s:layout>
		<s:VerticalLayout gap="10"
						  paddingLeft="10"
						  paddingRight="10"
						  paddingTop="10"
						  paddingBottom="10"
						  horizontalAlign="right"/>
	</s:layout>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="formatRadioButtonGroup"
							change="formatRadioButtonGroupChangeHandler(event)"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import nail.codecs.ImageFormat;
			import nail.otlib.assets.AssetsVersion;
			import nail.otlib.utils.OTFormat;
			import nail.utils.StringUtil;
			
			//--------------------------------------------------------------------------
			//
			// PROPERTIES
			//
			//--------------------------------------------------------------------------
			
			[Bindable]
			private var _versionCollection : ArrayCollection = new ArrayCollection( AssetsVersion.getList() );
			
			private var _fileName : String;
			
			private var _fileNameChanged : Boolean;
			
			private var _directory : File;
			
			private var _directoryChanged : Boolean;
			
			private var _format : String;
			
			private var _formatChanged : Boolean;
			
			private var _enableObdFormat : Boolean;
			
			private var _enableObdFormatChanged : Boolean;
			
			private var _version : AssetsVersion;
			
			private var _versionChanged : Boolean;
			
			private var _confirm : Boolean;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Override Protected
			//--------------------------------------
			
			override protected function commitProperties() : void
			{
				super.commitProperties();
				
				if (_fileNameChanged)
				{
					nameTextInput.text = _fileName;
					_fileNameChanged = false;
					check();
				}
				
				if (_directoryChanged)
				{
					directoryTextInput.text = _directory == null ? "" : _directory.nativePath;
					_directoryChanged = false;
					check();
				}
				
				if (_formatChanged)
				{
					setFormat(_format);
					_formatChanged = false;
					check();
				}
				
				if (_enableObdFormatChanged)
				{
					obdFormatRadioButton.visible = _enableObdFormat;
					versionDropDownList.visible = _enableObdFormat;
					_enableObdFormatChanged = false;
					check();
				}
				
				if (_versionChanged)
				{
					versionDropDownList.selectedIndex = _versionCollection.getItemIndex(_version);
					_versionChanged = false;
					check();
				}
			}
			
			//--------------------------------------
			// Public
			//--------------------------------------
			
			private function setFormat(format:String) : void
			{
				switch(format.toLowerCase())
				{
					case ImageFormat.PNG:
					{
						pngFormatRadioButton.selected = true;
						break;
					}
						
					case ImageFormat.BMP:
					{
						bmpFormatRadioButton.selected = true;
						break;
					}
						
					case ImageFormat.JPG:
					{
						jpgFormatRadioButton.selected = true;
						break;
					}
						
					case OTFormat.OBD:
					{
						obdFormatRadioButton.selected = true;
						break;
					}
				}
			}
			
			private function check() : void
			{
				confirmButton.enabled = (_fileName != null &&
										_fileName.length != 0 &&
										_directory != null &&
										_format != null);
				
				if (_enableObdFormat && _format == OTFormat.OBD)
				{
					confirmButton.enabled = (confirmButton.enabled && _version != null);
				}
			}
			
			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function nameTextInputChangeHandler(event:TextOperationEvent) : void
			{
				this.fileName = nameTextInput.text;
			}
			
			protected function directoryTextInputChangeHandler(event:TextOperationEvent) : void
			{
				var dir : File;
				
				try
				{
					dir = new File(directoryTextInput.text);
				} 
				catch(error:Error)
				{
					dir = null;
				}
				
				this.directory = dir;
			}
			
			protected function browseButtonClickHandler(event:MouseEvent) : void
			{
				var path : String;
				var dir : File;
				
				path = _directory != null ? _directory.nativePath : File.documentsDirectory.nativePath;
				dir = new File(path);
				dir.addEventListener(Event.SELECT, fileSelectHandler);
				dir.browseForDirectory("Select Folder");
				
				function fileSelectHandler(event:Event) : void
				{
					directory = dir;
				}
			}
			
			protected function formatRadioButtonGroupChangeHandler(event:Event) : void
			{
				this.format = formatRadioButtonGroup.selectedValue as String;
			}
			
			protected function versionDropDownListChangeHandler(event:IndexChangeEvent) : void
			{
				this.version = versionDropDownList.selectedItem as AssetsVersion;
			}
			
			protected function confirmButtonClickHandler(event:MouseEvent) : void
			{
				_confirm = true;
				this.close();
			}
			
			protected function windowClosingHandler(event:Event):void
			{
				if (!_confirm)
				{
					_fileName = null;
					_format = null;
					_directory = null;
					_version = null;
				}
			}
			
			//--------------------------------------
			// Getters / Setters 
			//--------------------------------------
			
			public function get fileName() : String
			{
				return _fileName;
			}
			
			public function set fileName(value:String) : void
			{
				if (_fileName != value)
				{
					_fileName = value;
					_fileNameChanged = true;
					invalidateProperties();
				}
			}
			
			public function get directory() : File
			{
				return _directory;
			}
			
			public function set directory(value:File) : void
			{
				if (_directory != value)
				{
					_directory = value;
					_directoryChanged = true;
					invalidateProperties();
				}
			}
			
			public function get format() : String
			{
				return _format;
			}
			
			public function set format(value:String) : void
			{
				if (StringUtil.isEmptyOrNull(value) || !_enableObdFormat && value == OTFormat.OBD)
				{
					value = ImageFormat.PNG;
				}
				else 
				{
					value = value.toLowerCase();
				}
				
				if (_format != value)
				{
					_format = value;
					_formatChanged = true;
					invalidateProperties();
				}
			}
			
			public function get enableObdFormat() : Boolean
			{
				return _enableObdFormat;
			}
			
			public function set enableObdFormat(value:Boolean) : void
			{
				if (_enableObdFormat != value)
				{
					_enableObdFormat = value;
					_enableObdFormatChanged = true;
					invalidateProperties();
				}
			}
			
			public function get version() : AssetsVersion
			{
				return _version;
			}
			
			public function set version(value:AssetsVersion) : void
			{
				if (_version != value)
				{
					_version = value;
					_versionChanged = true;
					invalidateProperties();
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Label text="Name:"
				 fontSize="10"
				 color="0xDFDFDF"/>
		<s:TextInput id="nameTextInput"
					 left="0"
					 right="0"
					 top="15"
					 change="nameTextInputChangeHandler(event)"/>
	</s:Group>
	
	<s:Group width="100%">
		<s:Label text="Output Folder:"
				 fontSize="10"
				 color="0xDFDFDF"/>
		<s:TextInput id="directoryTextInput"
					 left="0"
					 right="65"
					 top="15"
					 change="directoryTextInputChangeHandler(event)"/>
		<s:Button id="browseButton"
				  label="Browse"
				  height="22"
				  top="15"
				  right="0"
				  click="browseButtonClickHandler(event)"/>
	</s:Group>
	
	<nail:GroupBox label="Format"
				   width="100%">
		<nail:layout>
			<s:HorizontalLayout gap="20"
								paddingLeft="10"
								paddingRight="10"
								paddingTop="10"
								paddingBottom="10"
								verticalAlign="middle"/>
		</nail:layout>
		<s:RadioButton id="pngFormatRadioButton"
					   label="PNG"
					   groupName="formatRadioButtonGroup"/>
		<s:RadioButton id="bmpFormatRadioButton"
					   label="BMP" 
					   groupName="formatRadioButtonGroup"/>
		<s:RadioButton id="jpgFormatRadioButton"
					   label="JPG"
					   groupName="formatRadioButtonGroup"/>
		<s:RadioButton id="obdFormatRadioButton"
					   label="OBD"
					   visible="false"
					   groupName="formatRadioButtonGroup"/>
		<s:DropDownList id="versionDropDownList"
						visible="false"
						enabled="{obdFormatRadioButton.selected}"
						dataProvider="{_versionCollection}"
						change="versionDropDownListChangeHandler(event)"/>
	</nail:GroupBox>
	
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0x272727"/>
		</s:stroke>
		<s:filters>
			<s:DropShadowFilter blurX="1"
								blurY="1"
								distance="1"
								color="0x636363"/>
		</s:filters>
	</s:Line>
	
	<s:HGroup width="100%"
			  verticalAlign="middle"
			  horizontalAlign="right">
		<s:Button id="confirmButton"
				  label="Confirm"
				  width="70"
				  enabled="false"
				  click="confirmButtonClickHandler(event)"/>
		<s:Button id="cancelButton"
				  label="Cancel"
				  width="70"
				  click="close()"/>
	</s:HGroup>
</s:Window>
