<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright (c) 2014 <nailsonnego@gmail.com>
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
///////////////////////////////////////////////////////////////////////////////////
-->

<s:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:nail="library://ns.nail.com/naillib"
		  xmlns:otlib="library://ns.nail.com/otlib"
		  width="800"
		  height="600"
		  minWidth="600"
		  minHeight="400"
		  fontSize="11"
		  backgroundColor="0x494949"
		  showStatusBar="false"
		  title="Crop Image"
		  closing="windowClosingHandler(event)">
	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			
			import mx.collections.ArrayCollection;
			import mx.events.MoveEvent;
			
			import nail.assets.NailAssets;
			import nail.otlib.sprites.Sprite;
			import nail.otlib.utils.SpriteUtils;
			
			//--------------------------------------------------------------------------
			//
			// PROPERTIES
			//
			//--------------------------------------------------------------------------
			
			[Bindable]
			private var _sprites : ArrayCollection = new ArrayCollection();
			
			private var _surfaceCells : SurfaceCells;
			
			private var _rect : Rectangle = new Rectangle();
			
			private var _bitmap : BitmapData;
			
			private var _nextBitmap : BitmapData;
			
			private var _bitmapChanged : Boolean;
			
			private var _mouseDown : Boolean;
			
			private var _zoom : Number;
			
			private var _zoomChanged : Boolean;
			
			private var _lastValues : Rectangle = new Rectangle();
			
			private var _import : Boolean;
			
			//--------------------------------------------------------------------------
			//
			// METHODS
			//
			//--------------------------------------------------------------------------
			
			//--------------------------------------
			// Protected
			//--------------------------------------
			
			protected function update() : void
			{
				var dx : int;
				var dy : int;
				var up : Boolean;
				var sw : uint;
				var sh : uint;
				var size : uint;
				
				if (!this.hasImage)
				{
					return;
				}
				
				size = nail.otlib.sprites.Sprite.SPRITE_PIXELS;
				
				_surfaceCells.cellWidth = size;
				_surfaceCells.cellHeight = size;
				_surfaceCells.columns = columnsStepper.value;
				_surfaceCells.rows = rowsStepper.value;
				
				sw = (_surfaceCells.cellWidth * _surfaceCells.columns);
				sh = (_surfaceCells.cellHeight * _surfaceCells.rows);
				dx = (_surfaceCells.x + sw) - this.bitmap.width;
				dy = (_surfaceCells.y + sh) - this.bitmap.height;
				
				if (dx > 0)
				{
					_surfaceCells.x -= dx;
					up = true;
				}
				
				if (dy > 0)
				{
					_surfaceCells.y -= dy;
					up = true;
				}
				
				if (_surfaceCells.x < 0)
				{
					_surfaceCells.x = 0;
					up = true;
				}
				
				if (_surfaceCells.y < 0)
				{
					_surfaceCells.y = 0;
					up = true;
				}		
				
				if (up)
				{
					offsetXStepper.value = _surfaceCells.x;
					offsetYStepper.value = _surfaceCells.y;
				}
				
				offsetXStepper.maximum = this.bitmap.width - sw;
				offsetYStepper.maximum = this.bitmap.height - sh;
				columnsStepper.maximum = Math.floor(this.bitmap.width / size);
				rowsStepper.maximum = Math.floor(this.bitmap.height / size);
			}
			
			protected function onCropImage() : void
			{
				var x : int;
				var y : int;
				var width : uint;
				var height : uint;
				var columns : int;
				var rows : int;
				var rect : Rectangle;
				var point : Point;
				var c : int;
				var r : int;
				var sprite : BitmapData;
				
				if (!this.hasImage)
				{
					return;
				}
				
				x = offsetXStepper.value;
				y = offsetYStepper.value;
				width = nail.otlib.sprites.Sprite.SPRITE_PIXELS;
				height = nail.otlib.sprites.Sprite.SPRITE_PIXELS;
				columns = columnsStepper.value;
				rows = rowsStepper.value;
				
				// Returns if the values ​​have not changed.
				if (_lastValues.x == x &&
					_lastValues.y == y &&
					_lastValues.width == columns &&
					_lastValues.height == rows)
				{
					return;
				}
				
				rect = new Rectangle(0, 0, width, height);
				point = new Point();
				
				_lastValues.setTo(x, y, columns, rows);
				_sprites.removeAll();
				
				for (c = 0; c < columns; c++)
				{
					for (r = 0; r < rows; r++)
					{	
						rect.x = x + (c * width);
						rect.y = y + (r * height);
						
						sprite = new BitmapData(width, height, false, 0xFF00FF);
						sprite.copyPixels(this.bitmap, rect, point);
						sprite = SpriteUtils.removeMagenta(sprite);
						
						if (!SpriteUtils.isEmpty(sprite))
						{
							_sprites.addItem(sprite);
						}
					}
				}
			}
			
			protected function resetControls() : void
			{
				offsetXStepper.value = 0;
				offsetYStepper.value = 0;
				columnsStepper.value = 1;
				rowsStepper.value = 1;
				zoomSlider.value = 1.0;
				zoom = 1.0;
				_surfaceCells.x = 0;
				_surfaceCells.y = 0;
			}
			
			//--------------------------------------
			// Override Protected
			//--------------------------------------
			
			override protected function createChildren() : void
			{
				super.createChildren();
				
				_surfaceCells = new SurfaceCells();
				_surfaceCells.blendMode = BlendMode.INVERT;
				_surfaceCells.addEventListener(MouseEvent.MOUSE_DOWN, surfaceCellsMouseDownHandler);
				_surfaceCells.addEventListener(MouseEvent.MOUSE_UP, surfaceCellsMouseUpHandler); 
				_surfaceCells.addEventListener(MoveEvent.MOVE, surfaceCellsMoveHandler);
				imageConteinerGroup.addElement(_surfaceCells);
			}
			
			override protected function commitProperties() : void
			{
				super.commitProperties();
				
				if (_bitmapChanged)
				{
					setBitmap(_nextBitmap);
					_nextBitmap = null;
					_bitmapChanged = false;
				}
				
				if (_zoomChanged)
				{
					imageConteinerGroup.scaleX = _zoom;
					imageConteinerGroup.scaleY = _zoom;
					_zoomChanged = false;
				}
			}
			
			//--------------------------------------
			// Private
			//--------------------------------------
			
			private function setBitmap(bitmap:BitmapData) : void
			{
				_bitmap = bitmap;
				imageControl.source = bitmap;
				
				resetControls();
				update();
			}
			
			//--------------------------------------
			// Event Handlers
			//--------------------------------------
			
			protected function imageContainerMouseMoveHandler(event:MouseEvent) : void
			{
				if (_bitmap != null && _mouseDown) 
				{
					offsetXStepper.value = _surfaceCells.x;
					offsetYStepper.value = _surfaceCells.y;
				}
			}
			
			protected function imageContainerMouseDownHandler(event:MouseEvent) : void
			{
				var px : Number;
				var py : Number;
				
				if (!this.hasImage)
				{
					return;
				}
				
				if (event.target != _surfaceCells && event.localX <= this.bitmap.width && event.localY <= this.bitmap.height)
				{
					px = Math.round(event.localX - _surfaceCells.width * 0.5);
					py = Math.round(event.localY - _surfaceCells.height * 0.5);
					
					_surfaceCells.move(px, py);
					
					update();
					surfaceCellsMouseDownHandler(event);
				}
			}
			
			protected function surfaceCellsMouseDownHandler(event:MouseEvent) : void
			{
				_mouseDown = true;
				
				_rect.width  = imageControl.width - _surfaceCells.width;
				_rect.height = imageControl.height - _surfaceCells.height;
				
				cursorManager.setCursor(NailAssets.MOVE_CURSOR, 2, -8, -8);
				
				_surfaceCells.startDrag(false,_rect);
				
				systemManager.stage.addEventListener(MouseEvent.MOUSE_UP, surfaceCellsMouseUpHandler);
			}
			
			protected function surfaceCellsMouseUpHandler(event:MouseEvent) : void
			{
				systemManager.stage.removeEventListener(MouseEvent.MOUSE_UP, surfaceCellsMouseUpHandler);
				
				_mouseDown = false;
				
				_surfaceCells.stopDrag();
				
				cursorManager.removeCursor(cursorManager.currentCursorID);
			}
			
			protected function surfaceCellsMoveHandler(event:MoveEvent) : void
			{
				_surfaceCells.x = Math.round(_surfaceCells.x);
				_surfaceCells.y = Math.round(_surfaceCells.y);
			}
			
			protected function offsetStepperChangeHandler(event:Event) : void
			{
				_surfaceCells.x = offsetXStepper.value;
				_surfaceCells.y = offsetYStepper.value;
			}
			
			protected function zoomChangeHandler(event:Event) : void
			{
				this.zoom = HSlider(event.target).value;
			}
			
			protected function windowClosingHandler(event:Event) : void
			{
				if (!_import)
				{
					_sprites.removeAll();
				}
			}
			
			protected function importButtonClickHandler(event:MouseEvent):void
			{
				_import = true;
				this.close();
			}
			
			//--------------------------------------
			// Getters / Setters 
			//--------------------------------------
			
			public function get bitmap() : BitmapData
			{
				return _bitmap;
			}
			
			public function set bitmap(value:BitmapData) : void
			{
				if (_bitmap != value)
				{
					_nextBitmap = value;
					_bitmapChanged = true;
					invalidateProperties();
				}
			}
			
			public function get hasImage() : Boolean
			{
				return (_bitmap != null || (imageControl != null && imageControl.source != null));
			}
			
			[Bindable]
			public function get zoom() : Number
			{
				return _zoom;
			}
			
			public function set zoom(value:Number) : void
			{
				if (_zoom != value && value >= zoomSlider.minimum && value <= zoomSlider.maximum)
				{
					_zoom = value;
					_zoomChanged = true;
					invalidateProperties();
				}
			}
			
			public function get bitmapList() : Vector.<BitmapData>
			{
				var list : Vector.<BitmapData>;
				var length : uint;
				var i :uint;
				
				length = _sprites.length;
				if (_import && length > 0)
				{
					list = new Vector.<BitmapData>(length, true);
					for (i = 0; i < length; i++)
					{
						list[i] = _sprites.getItemAt(i) as BitmapData;
					}
					return list;
				}
				return null;
			}
			
		]]>
	</fx:Script>
	
	<s:BorderContainer width="150"
					   height="100%"
					   skinClass="nail.components.skins.BorderContainerSkin">
		<s:layout>
			<s:VerticalLayout paddingLeft="5"
							  paddingRight="5"
							  paddingTop="10"
							  paddingBottom="10"
							  verticalAlign="bottom"/>
		</s:layout>
		
		<nail:GroupBox label="Cells"
					   width="100%">
			<nail:layout>
				<s:VerticalLayout paddingLeft="5"
								  paddingRight="5"
								  paddingTop="10"
								  paddingBottom="10"/>
			</nail:layout>
			<s:TileGroup width="100%"
						 requestedColumnCount="2"
						 verticalAlign="middle">
				<s:Label text="X:"
						 textAlign="right"/>
				<s:NumericStepper id="offsetXStepper"
								  width="55"
								  minimum="0"
								  maximum="608"
								  change="offsetStepperChangeHandler(event)"/>
				<s:Label text="Y:"
						 textAlign="right"/>
				<s:NumericStepper id="offsetYStepper"
								  width="55"
								  minimum="0"
								  maximum="608"
								  change="offsetStepperChangeHandler(event)"/>
				<s:Label text="Columns:"
						 textAlign="right"/>
				<s:NumericStepper id="columnsStepper"
								  width="55"
								  minimum="1"
								  maximum="20"
								  change="update()"/>
				<s:Label text="Rows:"
						 textAlign="right"/>
				<s:NumericStepper id="rowsStepper"
								  width="55"
								  minimum="1"
								  maximum="20"
								  change="update()"/>
			</s:TileGroup>
		</nail:GroupBox>
		
		<nail:GroupBox label="Zoom"
					   width="100%">
			<nail:layout>
				<s:VerticalLayout paddingLeft="5"
								  paddingRight="5"
								  paddingTop="10"
								  paddingBottom="10"/>
			</nail:layout>
			<s:HSlider id="zoomSlider"
					   width="100%"
					   minimum="1.0"
					   maximum="5.0"
					   stepSize="0.1"
					   value="{zoom}"
					   bottom="10"
					   right="10"
					   change="zoomChangeHandler(event)"/>
		</nail:GroupBox>
		
		<s:Spacer height="3"/>
		
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x272727"/>
			</s:stroke>
			<s:filters>
				<s:DropShadowFilter blurX="1"
									blurY="1"
									distance="1"
									color="0x636363"/>
			</s:filters>
		</s:Line>
		
		<s:Spacer height="3"/>
		
		<s:Button id="cropButton"
				  label="Crop"
				  width="100%"
				  click="onCropImage()"/>
	</s:BorderContainer>
	
	<s:BorderContainer width="100%"
					   height="100%"
					   skinClass="nail.components.skins.BorderContainerSkin">
		<s:layout>
			<s:VerticalLayout paddingLeft="1"
							  paddingRight="0"
							  paddingTop="1"
							  paddingBottom="0"/>
		</s:layout>
		<s:Scroller width="100%"
					height="100%"
					verticalScrollPolicy="on"
					horizontalScrollPolicy="on">
			
			<s:Group id="imageConteinerGroup"
					 width="100%"
					 height="100%"
					 mouseMove="imageContainerMouseMoveHandler(event)"
					 mouseDown="imageContainerMouseDownHandler(event)">
				
				<otlib:CheckerBoard id="checkerboard"
									width="{imageControl.width}"
									height="{imageControl.height}"/>
				
				<s:Image id="imageControl"/>
				
				<s:SpriteVisualElement id="surfaceLine"
									   width="100%"
									   height="100%"
									   blendMode="invert"/>	
			</s:Group>
		</s:Scroller>
	</s:BorderContainer>
	
	<s:BorderContainer width="150"
					   height="100%"
					   skinClass="nail.components.skins.BorderContainerSkin">
		<s:layout>
			<s:VerticalLayout paddingLeft="5"
							  paddingRight="5"
							  paddingTop="10"
							  paddingBottom="10"/>
		</s:layout>
		
		<nail:GroupBox label="Sprites"
					   width="100%"
					   height="100%">
			<s:List width="100%"
					height="100%"
					contentBackgroundColor="0x494949"
					borderVisible="false"
					dataProvider="{_sprites}"
					itemRenderer="nail.otlib.components.renders.BitmapListRenderer"/>
		</nail:GroupBox>
		
		<s:Spacer height="3"/>
		
		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x272727"/>
			</s:stroke>
			<s:filters>
				<s:DropShadowFilter blurX="1"
									blurY="1"
									distance="1"
									color="0x636363"/>
			</s:filters>
		</s:Line>
		
		<s:Spacer height="3"/>
		
		<s:Button id="importButton"
				  label="Import"
				  width="100%"
				  enabled="{_sprites.length > 0}"
				  click="importButtonClickHandler(event)"/>
		<s:Button id="cancelButton"
				  label="Cancel"
				  width="100%"
				  click="close()"/>
	</s:BorderContainer>
</s:Window>
